# git-cliff configuration for Akamai Traffic Reports
# https://git-cliff.org/docs/configuration

[changelog]
# changelog header
header = """
# Changelog\n
All notable changes to this project will be documented in this file.\n
The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n
"""
# template for the changelog body
body = """
{% if version %}\
    ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
{% else %}\
    ## [unreleased]
{% endif %}\
{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | striptags | trim | upper_first }}
    {% for commit in commits %}
        - {% if commit.scope %}*({{ commit.scope }})* {% endif %}\
            {% if commit.breaking %}[**breaking**] {% endif %}\
            {{ commit.message | upper_first }}\
    {% endfor %}
{% endfor %}\n
"""
# template for the changelog footer
footer = """
<!-- generated by git-cliff -->
"""
# remove the leading and trailing whitespace from the templates
trim = true
# postprocessors
postprocessors = [
  # { pattern = '<REPO>', replace = "https://github.com/orhun/git-cliff" }, # replace repository URL
]

[git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# filter out the commits that are not conventional (set to false to include legacy commits)
filter_unconventional = false
# process each line of a commit as an individual commit
split_commits = false
# regex for preprocessing the commit messages
commit_preprocessors = [
  # Replace issue numbers
  #{ pattern = '\((\w+\s)?#([0-9]+)\)', replace = "([#${2}](<REPO>/issues/${2}))"},
  # Check spelling of the commit with https://github.com/crate-ci/typos
  # If the spelling is incorrect, it will be automatically fixed.
  #{ pattern = '.*', replace_command = 'typos --write-changes -' },
]
# regex for parsing and grouping commits
commit_parsers = [
  # Standard Conventional Commits
  { message = "^feat", group = "<!-- 0 -->⚡ Features" },
  { message = "^fix", group = "<!-- 1 -->🐛 Bug Fixes" },
  { message = "^doc", group = "<!-- 2 -->📚 Documentation" },
  { message = "^perf", group = "<!-- 3 -->🚀 Performance" },
  { message = "^refactor", group = "<!-- 4 -->🔨 Refactor" },
  { message = "^style", group = "<!-- 5 -->🎨 Styling" },
  { message = "^test", group = "<!-- 6 -->🧪 Testing" },
  { message = "^security", group = "<!-- 8 -->🛡️ Security" },
  { message = "^revert", group = "<!-- 9 -->◀️ Revert" },

  # Skip release and dependency commits
  { message = "^chore\\(release\\): prepare for", skip = true },
  { message = "^chore\\(deps.*\\)", skip = true },
  { message = "^chore\\(pr\\)", skip = true },
  { message = "^chore\\(pull\\)", skip = true },

  # Chore and CI commits
  { message = "^chore|^ci|^build", group = "<!-- 7 -->⚙️ Miscellaneous Tasks" },

  # Legacy commits (non-conventional format) - map to appropriate groups
  { message = "^[Ii]mplement.*[Cc]ircuit [Bb]reaker", group = "<!-- 0 -->⚡ Features" },
  { message = "^[Ii]mplement.*[Dd]ependency [Ii]njection", group = "<!-- 0 -->⚡ Features" },
  { message = "^[Ii]mplement.*[Cc]oncurrent", group = "<!-- 0 -->⚡ Features" },
  { message = "^[Ii]mplement.*[Ll]ogging", group = "<!-- 0 -->⚡ Features" },
  { message = "^[Ii]mplement.*[Cc]aching", group = "<!-- 0 -->⚡ Features" },
  { message = "^[Ii]mplement.*[Vv]alidation", group = "<!-- 0 -->⚡ Features" },
  { message = "^[Ii]mplement.*[Tt]racing", group = "<!-- 0 -->⚡ Features" },
  { message = "^[Ii]mplement", group = "<!-- 0 -->⚡ Features" },
  { message = "^[Aa]dd ", group = "<!-- 0 -->⚡ Features" },
  { message = "^[Ff]ix ", group = "<!-- 1 -->🐛 Bug Fixes" },
  { message = "^[Uu]pdate.*test", group = "<!-- 6 -->🧪 Testing" },
  { message = "^[Mm]erge pull request", skip = true },
  { message = "^[Ii]nitial commit", group = "<!-- 0 -->⚡ Features" },

  # Catch-all for remaining commits (map to Miscellaneous)
  { message = ".*", group = "<!-- 7 -->⚙️ Miscellaneous Tasks" },
]
# protect breaking changes from being skipped due to matching a skipping commit_parser
protect_breaking_commits = false
# filter out the commits that are not matched by commit parsers (set to false to include all commits)
filter_commits = false
# regex for matching git tags
# tag_pattern = "v[0-9].*"
# regex for skipping tags
# skip_tags = "v0.1.0-beta.1"
# regex for ignoring tags
# ignore_tags = ""
# sort the tags topologically
topo_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "oldest"
# limit the number of commits included in the changelog.
# limit_commits = 42

[remote.github]
owner = "jimc1682000"
repo = "akamai-reports"
